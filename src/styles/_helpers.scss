@use "sass:math";
@import "variables";

@mixin borderBox($active: true, $color: $secondary) {

  //positioning
  position: relative;

  //styling
  border-radius: $borderRadius;
  border: 1px solid transparent;
  background: backgroundBorderColor($color);
  background-clip: padding-box, border-box;
  background-origin: padding-box, border-box;
  color: rgba($white, .5);
  font-family: Ubuntu, sans-serif;
  font-size: $md;


  @if ($active == true) {
    &:hover, &:active, &--active, &:focus, &:focus-visible {
      border: 1px solid transparent;
      background: backgroundBorderColor($color, true);
      background-clip: padding-box, border-box;
      background-origin: padding-box, border-box;
      outline: none;
    }
  }
}

@mixin box($active: true, $color: $secondary) {
  //positioning
  position: relative;

  //styling
  border-radius: $borderRadius;
  border: 1px solid rgba(if($color == $primary, $white, $color), .1);
  background: backgroundColor($color);
  color: rgba($white, .5);
  font-family: Ubuntu, sans-serif;
  font-size: $md;

  @if ($active == true) {
    &:hover, &:active, &--active, &:focus, &:focus-visible {
      background: backgroundColor($color, true);
      outline: none;
    }

    &:active, &--active, &:focus, &:focus-visible {
      border: 1px solid rgba($color, .2);
    }
  }
}

@mixin hoverAndActiveContent() {
  &:hover, &:active, &--active, &:focus, &:focus-visible {
    @content;
    outline: none;
  }
}

@mixin activeContent() {
  &:active, &--active {
    @content
  }
}

@function borderColor($color: $secondary, $interacted: false) {
  @return rgba(if($color == $primary, $white, $color), if($interacted, .2, .1))
}

@function backgroundColor($color: $primary, $interacted: false) {
  @return if($interacted, mix($bodyBg, if($color == $primary, $white, $color), 80%), mix($bodyBg, $color, 90%))
}

@function backgroundBorderColor($color: $primary, $interacted: false) {
  @return if($interacted, (
            linear-gradient(to right, backgroundColor($color, $interacted), backgroundColor($color, $interacted)),
            linear-gradient(to bottom, rgba(if($color == $primary, $white, $color), 1), rgba(if($color == $primary, $white, $color), .2))),
          (
            linear-gradient(to right, backgroundColor($color, $interacted), backgroundColor($color, $interacted)),
            linear-gradient(to bottom, rgba(if($color == $primary, $white, $color), .5), rgba(if($color == $primary, $white, $color), .1)))
          )
}

@function backgroundBorderColorWithoutBackground($color: $primary, $interacted: false) {
  @return if($interacted, (
          linear-gradient(to right, backgroundColor($primary, false), backgroundColor($primary, false)),
          linear-gradient(to bottom, rgba(if($color == $primary, $white, $color), 1), rgba(if($color == $primary, $white, $color), .2))),
                  (
                          linear-gradient(to right, backgroundColor($primary, false), backgroundColor($primary, false)),
                          linear-gradient(to bottom, rgba(if($color == $primary, $white, $color), .5), rgba(if($color == $primary, $white, $color), .1)))
  )
}

@mixin border($color: $secondary, $interact: true) {

  border: 1px solid borderColor($color);

  @if ($interact) {
    &:active, &--active {
      border: 1px solid borderColor($color, true);
    }
  }
}

@function color($color, $opacity: 0.5) {
  @return rgba(if($color == $primary, $white, $color), $opacity)
}

@mixin background($color: $primary, $interact: true) {
  background: mix($bodyBg, $color, 90%);

  @if ($interact == true) {
    &:hover, &:active, &--active {
      background: mix($bodyBg, if($color == $primary, $white, $color), if($color == $primary, 95%, 85%));
    }
  }
}

@mixin disabled {

  &--disabled {
    opacity: 50%;
    pointer-events: none;
  }

}
